cmake_minimum_required(VERSION 3.10)
SET(CMAKE_CXX_STANDARD 11)
SET(MAJOR_VERSION 0)
SET(MINOR_VERSION 2)
SET(PATCH_VERSION 0)
PROJECT(snow VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION})

# v=== prepare necessary macros ===v
# # build type
IF(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT DEFINED CMAKE_BUILD_TYPE OR CMAKE_BUILD_TYPE STREQUAL "")

# # build platform
IF(NOT DEFINED BUILD_PLATFORM)
    EXECUTE_PROCESS(COMMAND uname -m
                    OUTPUT_VARIABLE BUILD_PLATFORM OUTPUT_STRIP_TRAILING_WHITESPACE)
ENDIF(NOT DEFINED BUILD_PLATFORM)

# # output directory
IF(NOT DEFINED SNOW_INSTALL_DIR OR SNOW_INSTALL_DIR STREQUAL "")
    GET_FILENAME_COMPONENT(SNOW_PARENT ${PROJECT_SOURCE_DIR} DIRECTORY)
    SET(SNOW_INSTALL_DIR ${SNOW_PARENT}/libsnow)
    message(STATUS "[snow install]: use default install dir."
                   " You can set -DSNOW_INSTALL_DIR=<intall_dir>")
ENDIF(NOT DEFINED SNOW_INSTALL_DIR OR SNOW_INSTALL_DIR STREQUAL "")
message(STATUS "[snow install]: `make install` to install at ${SNOW_INSTALL_DIR}")

# # set cxx flags
SET(CMAKE_CXX_FLAGS       "${CMAKE_CXX_FLAGS} -O3 -std=c++11 -g -march=native")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG -O0 -g -std=c++11 -march=native")

SET(WARNING_FLAGS "-Wall -Werror -Wno-multichar -Wno-switch -Wno-unused-result -Wno-unused-local-typedefs")
SET(CMAKE_CXX_FLAGS       "${CMAKE_CXX_FLAGS} ${WARNING_FLAGS}")
SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${WARNING_FLAGS}")

# # set directory
SET(SNOW_ROOT       ${PROJECT_SOURCE_DIR})
SET(SNOW_INSTALL_INC ${SNOW_INSTALL_DIR}/include)
SET(SNOW_INSTALL_LIB ${SNOW_INSTALL_DIR}/${BUILD_PLATFORM}/${CMAKE_BUILD_TYPE}/lib)
SET(SNOW_INSTALL_BIN ${SNOW_INSTALL_DIR}/${BUILD_PLATFORM}/${CMAKE_BUILD_TYPE}/bin)
# ^=== prepare necessary macros ===^

# v=== get snow_core ===v
ADD_SUBDIRECTORY("snow/core")
SET(SNOW_HEADERS ${SNOW_CORE_HEADERS})
# ^=== get snow_core ===^

# v=== install snow ===v
# # core module
ADD_LIBRARY(snow-core SHARED ${SNOW_CORE_HEADERS} ${SNOW_CORE_SOURCES})
TARGET_COMPILE_DEFINITIONS(snow-core PUBLIC
    SNOW_VERSION_STRING="${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}")
TARGET_INCLUDE_DIRECTORIES(snow-core PUBLIC
    "$<BUILD_INTERFACE:${SNOW_ROOT}>"
    "$<INSTALL_INTERFACE:${SNOW_INSTALL_INC}>")
# # entire snow
ADD_LIBRARY(snow SHARED ${SNOW_HEADERS})
SET_TARGET_PROPERTIES(snow PROPERTIES LINKER_LANGUAGE CXX)
TARGET_LINK_LIBRARIES(snow snow-core)
TARGET_INCLUDE_DIRECTORIES(snow PUBLIC
    "$<BUILD_INTERFACE:${SNOW_ROOT}>"
    "$<INSTALL_INTERFACE:${SNOW_INSTALL_INC}>")
# # all headers
INSTALL(DIRECTORY ./snow/
        DESTINATION "${SNOW_INSTALL_INC}/snow"
        FILES_MATCHING
            PATTERN "*.h"
            PATTERN "*.hpp"
            PATTERN "LICENSE"
)
# # install lib
INSTALL(TARGETS snow-core
    EXPORT core
    LIBRARY  DESTINATION "${SNOW_INSTALL_LIB}"
    ARCHIVE  DESTINATION "${SNOW_INSTALL_LIB}"
    RUNTIME  DESTINATION "${SNOW_INSTALL_BIN}"
    INCLUDES DESTINATION "${SNOW_INSTALL_INC}"
)
INSTALL(TARGETS snow snow-core
    EXPORT snow
    LIBRARY  DESTINATION "${SNOW_INSTALL_LIB}"
    ARCHIVE  DESTINATION "${SNOW_INSTALL_LIB}"
    RUNTIME  DESTINATION "${SNOW_INSTALL_BIN}"
    INCLUDES DESTINATION "${SNOW_INSTALL_INC}"
)
# # install config
INSTALL(EXPORT core
        FILE snow-core-config.cmake
        DESTINATION "${SNOW_INSTALL_DIR}")
INSTALL(EXPORT snow
        FILE snow-config.cmake
        DESTINATION "${SNOW_INSTALL_DIR}")
# ^=== install snow ===^

# v=== export for using add_subdirectory() ===v
export(TARGETS snow-core snow FILE snow-target.cmake)
# ^=== export for using add_subdirectory() ===^
